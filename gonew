#!/bin/bash

BOLD=$(tput bold)
BLUE=$(tput -Txterm setaf 4)
GREEN=$(tput -Txterm setaf 2)
RESET=$(tput -Txterm sgr0)

function usage() {
	cat << EOF
Usage: $0 [project name]
EOF
}

if [ "$1" == "-h" ]; then
	usage
	exit 0
elif [ "$1" != "" ]; then
    PROJECT_NAME=$1
else
    echo -n " ${BOLD}${BLUE}>${RESET} Enter new project name: "
    read PROJECT_NAME
fi
mkdir $PROJECT_NAME && cd $PROJECT_NAME

echo -n " ${BOLD}${BLUE}>${RESET} Github username (leave empty if none): "
read GH_USERNAME
if [ "$GH_USERNAME" != "" ]; then
    go mod init github.com/${GH_USERNAME}/${PROJECT_NAME} 2> /dev/null
    git init . > /dev/null
fi

echo -n " ${BOLD}${BLUE}>${RESET} Docker registry (leave empty if none): "
read DOCKER_REGISTRY

##
# Create and configure Makefile
##
cat <<\EOF > Makefile
GOCMD=go
GOTEST=$(GOCMD) test
GOVET=$(GOCMD) vet
BINARY_NAME=GONEW_BIN_NAME
VERSION?=0.0.0
DOCKER_REGISTRY?=GONEW_DOCKER_REGISTRY

GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
RESET  := $(shell tput -Txterm sgr0)

.PHONY: all build clean

all: help

## Build:
build: ## Build the Go project
	mkdir -p out/bin
	GO111MODULE=on $(GOCMD) build -o out/bin/$(BINARY_NAME) .

clean: ## Clean all the files and binaries generated by the Makefile
	rm -rf ./out

## Test:
test: ## Run the tests of the project
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/jstemmer/go-junit-report
	$(eval OUTPUT_OPTIONS = | tee /dev/tty | go-junit-report -set-exit-code > junit-report.xml)
endif
	$(GOTEST) -v -race ./... $(OUTPUT_OPTIONS)

coverage: ## Run the tests of the project and export the coverage
	$(GOTEST) -cover -covermode=count -coverprofile=profile.cov ./...
	$(GOCMD) tool cover -func profile.cov
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/AlekSi/gocov-xml
	GO111MODULE=off go get -u github.com/axw/gocov/gocov
	gocov convert profile.cov | gocov-xml > coverage.xml
endif

## Docker:
docker-build: ## Use the Dockerfile to build the container
	docker build --rm --tag $(BINARY_NAME) .

docker-release: ## Release the container with tag latest and version
	docker tag $(BINARY_NAME) $(DOCKER_REGISTRY)/$(BINARY_NAME):latest
	docker tag $(BINARY_NAME) $(DOCKER_REGISTRY)/$(BINARY_NAME):$(VERSION)

	docker push $(DOCKER_REGISTRY)/$(BINARY_NAME):latest
	docker push $(DOCKER_REGISTRY)/$(BINARY_NAME):$(VERSION)

## Help:
help: ## Show this help
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} { \
		if (/^[a-zA-Z_-]+:.*?##.*$$/) {printf "    ${YELLOW}%-20s${GREEN}%s${RESET}\n", $$1, $$2} \
		else if (/^## .*$$/) {printf "  ${CYAN}%s${RESET}\n", substr($$1,4)} \
		}' $(MAKEFILE_LIST)
EOF
sed -i "s/GONEW_BIN_NAME/${PROJECT_NAME}/g" Makefile
sed -i "s/GONEW_DOCKER_REGISTRY/${DOCKER_REGISTRY}/g" Makefile

##
# Create main.go
##
cat << EOF > main.go
package main

import "fmt"

func main() {
    fmt.Println("Hello, gonew!")
}
EOF

##
# End notification
##
echo -e "    ${GREEN}Created${RESET} application \`$PROJECT_NAME\` package"